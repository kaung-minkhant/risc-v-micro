library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity uart_rx is
    generic (
        count_per_bit: natural := 20 -- clock per bit
    );
    port (
        rx, clk: in std_logic;
        data_out: out std_logic_vector(7 downto 0);
        rx_busy, rx_done: out std_logic
    );
end entity uart_rx;

architecture rtl of uart_rx is
    
    
    signal rx_flag : std_logic := '0';

    signal index : integer range 0 to 9 := 0;
    
    signal count : integer := 0;
    constant HALF_BIT_COUNT : natural := (count_per_bit-1)/2;
    constant FULL_BIT_COUNT : natural := count_per_bit - 1;
begin

    process (clk) is
        variable data_full : std_logic_vector(9 downto 0) := (others => '0');
    begin
        if (clk'event and clk = '1') then
            if (rx_flag = '0') then
                rx_done <= '0';
            end if;
            if (rx = '0') then
                rx_flag <= '1';
            end if;

            if (rx_flag = '1') then
                rx_busy <= '1';
                if (count <= FULL_BIT_COUNT) then
                    count <= count + 1;
                else 
                    count <= 0;
                end if;

                if (count = HALF_BIT_COUNT) then
                    data_full(index) := rx;
                    if (index < 9) then
                        index <= index + 1;
                    else 
                        index <= 0;
                        rx_flag <= '0';
                        rx_busy <= '0';
                        if (data_full(0) = '0' and data_full(9) = '1') then
                            data_out <= data_full(8 downto 1);
                            rx_done <= '1';
                        else
                            data_out <= x"00";
                        end if;
                    end if;
                end if;
            else
                rx_busy <= '0';
            end if;

        end if;
    end process;
    
    
end architecture rtl;